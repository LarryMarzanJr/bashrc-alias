# ======================================================================================================================================
# VIM DOCUMENTATION
# --------------------------------------------------------------------------------------------------------------------------------------
# Here is how to cut-and-paste or copy-and-paste text using a visual selection in Vim.

# Cut and paste:

# Position the cursor where you want to begin cutting.
# Press v to select characters (or uppercase V to select whole lines, or Ctrl-v to select rectangular blocks).
# Move the cursor to the end of what you want to cut.
# Press d to cut (or y to copy).
# Move to where you would like to paste.
# Press P to paste before the cursor, or p to paste after.
# Copy and paste is performed with the same steps except for step 4 where you would press y instead of d:
# 
# d stands for delete in Vim, which in other editors is usually called cut
# y stands for yank in Vim, which in other editors is usually called copy Contents[show]
# 
# Copying and cutting in normal mode
# In normal mode, one can copy (yank) with y{motion}, where {motion} is a Vim motion. For example, yw copies to the beginning of the next word. Other helpful yanking commands include:
# 
# yy or Y – yank the current line, including the newline character at the end of the line
# y$ – yank to the end of the current line (but don't yank the newline character); note that many people like to remap  Y to y$ in line with C and D
# yiw – yank the current word (excluding surrounding whitespace)
# yaw – yank the current word (including leading or trailing whitespace)
# Cutting can be done using d{motion}.
# 
# To copy into a register, one can use "{register} immediately before one of the above commands to copy into the register {register}. See pasting registers for more information on register syntax.
# 
# Pasting in normal mode
# In normal mode, one can use p to paste after the cursor, or P to paste before the cursor.
# 
# The variants gp and gP move the cursor after the pasted text, instead of leaving the cursor stationary.
# 
# To select a register from which to paste, one can use "{register}p to paste from the register {register}. See pasting registers.
# 
# Pasting in insert modeEdit
# The contents of a register can be pasted while in insert mode: type Ctrl-r then a character that identifies the register. For example, Ctrl-r then " pastes from the default register, and Ctrl-r then 0 pastes from register zero which holds # the text that was most recently yanked (copied). See pasting registers.
# 
# Copying and cutting in command-line mode
# Command-line mode occurs after typing : to enter a command. By default, while in the command line, typing Ctrl-f opens the command-line window where commands can be edited using normal mode. For example, part of one command can be copied then pasted into another command. See using command-line history.
# 
# Pasting in command-line mode
# There are two approaches to pasting in command-line mode. The first is to open the command-line window with Ctrl-f, then use normal-mode commands to paste. See the previous section.
# 
# The second approach is to type Ctrl-r then a character to paste the contents of the register identified by the character. See Pasting in insert mode above.
# 
# Copy, cut, and paste from the system clipboard
# Main article: Accessing the system clipboard
# 
# Unlike most text editors, Vim distinguishes between its own registers and the system clipboard. By default, Vim copies to, cuts to, and pastes from its own default register, called the unnamed register ("", also called quotequote) instead of the system clipboard.
# 
# Assuming Vim was compiled with clipboard access, it is possible to access the "+ or "* registers, which can modify the system clipboard. In this case, one can copy with e.g. "+y in visual mode, or "+y{motion} in normal mode, and paste with e.g. "+p.
# 
# If your installation of Vim was not compiled with clipboard support, you must either install a package that has clipboard support, or use an external command such as xclip as an intermediary. See Accessing the system clipboard for detailed information.
# 
# Multiple copying
# Main article: Pasting registers.
# 
# Deleted or copied text is placed in the unnamed register. If wanted, a register can be specified so the text is also copied to the named register. A register is a location in Vim's memory identified with a single letter. A double quote character is used to specify that the next letter typed is the name of a register.
# 
# For example, you could select the text hello then type "ay to copy "hello" to the a register. Then you could select the text world and type "by to copy "world" to the b register. After moving the cursor to another location, the text could be pasted: type "ap to paste "hello" or "bp to paste "world". These commands paste the text after the cursor. Alternatively, type "aP or "bP to paste before the cursor.
# 
# Windows clipboard
# When using Vim under Windows, the clipboard can be accessed with the following:
# 
# In step 4, press Shift+Delete to cut or Ctrl+Insert to copy.
# In step 6, press Shift+Insert to paste.
# Different instancesEdit
# How does one copy and paste between two instances of Vim on different Linux consoles?
# 
# After copying text, open a new buffer for a new file:
# 
# :e ~/dummy
# Paste the text to the new buffer.
# Write the new buffer :w.
# Switch to the previous buffer :bp to release *.swp.
# Now switch to the other console.
# Put the cursor at the desired place.
# Read the dummy file :r ~/dummy
# Increasing the buffer sizeEdit
# By default, only the first 50 lines in a register are saved, and a register is not saved if it contains more than 10 kilobytes. :help 'viminfo'
# 
# In the example below, the first line displays the current settings, while the second line sets:
# 
# '100 Marks will be remembered for the last 100 edited files.
# <100 Limits the number of lines saved for each register to 100 lines; if a register contains more than 100 lines, only the first 100 lines are saved.
# s20 Limits the maximum size of each item to 20 kilobytes; if a register contains more than 20 kilobytes, the register is not saved.
# h Disables search highlighting when Vim starts.
# :set viminfo?
# :set viminfo='100,<100,s20,h
# ======================================================================================================================================

#--------------------------------------------------------------
# export path
#--------------------------------------------------------------
# refresh .bashrc alias sources:
alias src='source ~/.bashrc'

# edit aliases library
alias al='vim /mnt/d/my_aliases/ms_aliases'

###############################################################


#--------------------------------------------------------------
# aliases
#--------------------------------------------------------------

# common in terminal
alias cl='clear'
alias CL='clear'
alias EXIT='exit'
alias poweroff='sudo poweroff'
alias reboot='sudo reboot'
alias install='sudo apt-get install'
alias update='sudo apt-get update'
alias upgrade='sudo apt-get upgrade'
alias remove='sudo apt-get remove'
alias purge='sudo apt-get purge'
alias autoremove='sudo apt-get autoremove'
alias dpkg='sudo dpkg'
alias aptlist='apt list --installed'
alias repo='sudo add-apt-repository'

# laravel homestead
alias vm='ssh vagrant@127.0.0.1 -p 2222'
alias hsr='cd ~/Homestead && vagrant reload && vagrant provision'
alias hs='cd ~/Homestead && vagrant up && vagrant provision'
alias yaml='subl ~/.homestead/Homestead.yaml'
# laravel aliases
alias artisan='php artisan'
alias serve='php artisan serve'
alias vaprobash='curl -L http://bit.ly/vaprobash > Vagrantfile'

# project path
# for vagrant
# alias vcode='cd /media/joenmarz/DATA/PHP/codes'
# good ol apache
#alias code='cd /var/www/html'
alias code='cd /media/joenmarz/DATA/PHP/wampstack/apache2/htdocs'

# for manual lamp
#alias restartapache='sudo service apache2 restart'
#alias restartmysql='sudo service mysql restart'
#alias restartlamp='restartapache && restartmysql'

# for bitnami lamp
alias restartapache='sh ~/lampstack/ctlscript.sh restart apache'
alias restartmysql='sh ~/lampstack/ctlscript.sh restart mysql'
alias restartlamp='restartapache && restartmysql'
alias php='~/lampstack/php/bin/php'

# PHP
# 5.5
# 5.6
# 7.0
# Enable / Disable xdebug by commenting out using semicolon ';' to the zend_extension=xdebug.so
#alias xdebug='sudo vim /etc/php/7.0/cli/conf.d/20-xdebug.ini'

# YII2 Framework
# YII alias
alias yii='php yii'
#Install yii2 basic template
alias yii2bas='composer create-project yiisoft/yii2-app-basic'
#Install yii2 advanced template
alias yii2adv='composer create-project yiisoft/yii2-app-advanced'
#install yii2 template with gulp sass support
alias yii2basgulp='create-project --prefer-dist --stability=dev jacmoe/yii2-app-basic-gulp-sass'
#Install yii2 advanced template with gulp sass support
alias yii2advgulp='composer create-project --prefer-dist --stability=dev jacmoe/yii2-app-advanced-gulp-sass'
#GII Permissions
alias gii_init='sudo chmod 777 -R frontend/models/ frontend/controllers/ frontend/views/ backend/models/ backend/controllers/ backend/views/'
#--------------------------------------------------------
# YII migrations
# create migration: to auto add fields just add --fields="title:string,body:text"
alias create='yii migrate/create'
# yii migrate
alias up='yii migrate'
# drop table
alias down='yii migrate/down' #<space><migration_number> ex: down 3

# composer
alias composer='php /usr/local/bin/composer'

# file path
alias documents='cd /media/joenmarz/DATA/Documents'
alias music='cd /media/joenmarz/DATA/Music'
alias pictures='cd /media/joenmarz/DATA/Pictures'
alias videos='cd /media/joenmarz/DATA/Videos'
alias downloads='cd /media/joenmarz/DATA/Downloads'
alias data='cd /media/joenmarz/DATA'

# youtube-dl
# download with mp4 format
alias youtube='youtube-dl -f 18 cit'
